import{RewardMap,QLearningAgent}from"./qlearning.js";Vue.component("q-learning-tab",{template:'\n    <div id="qlearning">\n        <div id="qlearning-header">\n            <h1>Q-Learning Algorithm</h1>\n            <p>Robot game demonstrating the Q-Learning algorithm.</p>\n        </div>\n        <div id="control_panel">\n            <div id="left_screw" class="screw"><div>x</div></div>\n            <div id="control_panel-title">Control Panel</div>\n            <div id="right_screw" class="screw"><div>x</div></div>\n\n            <div id="epsilon_text" class="greek-letters">ε</div>\n            <div id="alpha_text" class="greek-letters">α</div>\n            <div id="gamma_text" class="greek-letters">γ</div>\n            <div id="qvalue_text">Show Q Values</div>\n\n            <input type="range" min="0" max="1" value="0.5" step="0.1" class="slider" id="epsilon_slider" v-model="epsilon">\n            <input type="range" min="0" max="1" value="0.5" step="0.1" class="slider" id="alpha_slider" v-model="alpha">\n            <input type="range" min="0" max="1" value="0.7" step="0.1" class="slider" id="gamma_slider" v-model="gamma">\n            <input type="checkbox" id="qvalue_checkbox" v-model="showQValues">\n\n            <div id="epsilon_value" class="value_screen">{{ formatValue(epsilon) }}</div>\n            <div id="alpha_value" class="value_screen">{{ formatValue(alpha) }}</div>\n            <div id="gamma_value" class="value_screen">{{ formatValue(gamma) }}</div>\n            \n            <button id="load_button" class="btn control-panel__button" type="button" disabled>Load</button>\n            <button id="reset_button" class="btn control-panel__button" @click="reset" type="button">Reset</button>\n            <button id="learn_button" class="btn control-panel__button" type="button" disabled>Learn</button>\n            <button id="explore_button" class="btn control-panel__button" @click="explore" type="button">Explore</button>\n        </div>\n        <div id="qlearning-map" :style="gridStyling(row, column)">\n            <template v-for="i in stringToNum(row)">\n                <div v-for="j in stringToNum(column)" class="tile--background">\n                    <div :class="styleTile(i - 1, j - 1)" :id="matrixId(i - 1, j - 1)">\n                        <div v-if="showQValues" class="UP"><div>{{formatQValue(agent.qMatrix.matrix[matrixId(i - 1, j - 1)][0])}}</div></div>\n                        <div v-if="showQValues" class="LEFT"><div>{{formatQValue(agent.qMatrix.matrix[matrixId(i - 1, j - 1)][3])}}</div></div>\n                        <div v-if="showQValues" class="RIGHT"><div>{{formatQValue(agent.qMatrix.matrix[matrixId(i - 1, j - 1)][1])}}</div></div>\n                        <div v-if="showQValues" class="DOWN"><div>{{formatQValue(agent.qMatrix.matrix[matrixId(i - 1, j - 1)][2])}}</div></div>\n                    </div>\n                </div>\n\t        </template>\n        </div>\n    <br/>\n\t</div>',data:function(){return{cliffs:["2x1","2x2","2x3","2x4"],reward:"2x5",start:"2x0",row:"3",column:"6",showQValues:!0,epsilon:.5,alpha:.5,gamma:.7,agent:null,movement:null,exploring:!1}},created(){new RegExp("Android|webOS|iPhone|iPad|BlackBerry|Windows Phone|Opera Mini|IEMobile|Mobile","i").test(navigator.userAgent)&&(this.cliffs=["2x1"],this.reward="2x2",this.start="2x0",this.row="3",this.column="3"),this.agent=new QLearningAgent(new RewardMap(this.row,this.column,this.cliffs,this.reward),this.start)},methods:{gridStyling:function(t,e){return new RegExp("Android|webOS|iPhone|iPad|BlackBerry|Windows Phone|Opera Mini|IEMobile|Mobile","i").test(navigator.userAgent)?{gridTemplateRows:"repeat(3, 100px)",gridTemplateColumns:"repeat(3, 100px)"}:{gridTemplateRows:"repeat("+t+", 100px)",gridTemplateColumns:"repeat("+e+", 100px)"}},stringToNum:function(t){return parseInt(t,10)},formatQValue:function(t){return 0!=t?t.toString().substring(0,5):""},formatValue:function(t){return 0==t||1==t?t.toString()+".0":t.toString()},matrixId:function(t,e){return t.toString()+"x"+e.toString()},styleTile:function(t,e){var i=this.matrixId(t,e),n=this.agent.map.matrix[i];return-100==n&&i==this.agent.state?"tile--robot--falling":100==n&&i==this.agent.state?"tile--robot--winning":i==this.agent.state?"tile--agent":100==n?"tile--reward":-100==n?"tile--cliff":"tile"},move:function(){this.agent.move(this.epsilon),this.agent.updateQ(this.alpha,this.gamma),this.agent.state=this.agent.nextState,this.cliffs.includes(this.agent.state)&&(clearInterval(this.movement),this.exploring=!1),this.agent.state==this.reward&&(clearInterval(this.movement),this.exploring=!1)},explore:function(){0==this.exploring&&(this.agent.state=this.agent.initialPosition,this.movement=setInterval(this.move,200),this.exploring=!0)},reset:function(){clearInterval(this.movement),this.exploring=!1,this.agent=new QLearningAgent(new RewardMap(this.row,this.column,this.cliffs,this.reward),this.start)}}});